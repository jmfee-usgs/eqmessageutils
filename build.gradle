/*
 * This file was generated by the Gradle "init" task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

apply plugin: "java"
apply plugin: "jacoco"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
}

ext {
  gensrc = "src/generated/java"
  activation_version = "1.1.1"
  jaxb_version = "2.3+"
  jaxb2_basics_version = "0.12.0"

  getGitCommit = { gitDir ->
    def cmd = 'git --git-dir=' + gitDir + '/.git rev-parse HEAD'
    return cmd.execute().text.replace('\n', '') ?: 'unknown'
  }
}

configurations {
  codacy
  jaxb
}

dependencies {
  codacy 'com.codacy:codacy-coverage-reporter:4.0+'

  compile "javax.activation:activation:${activation_version}"
  compile "javax.xml.bind:jaxb-api:${jaxb_version}"
  compile "org.glassfish.jaxb:jaxb-runtime:${jaxb_version}"

  jaxb "org.jvnet.jaxb2_commons:jaxb2-basics-ant:${jaxb2_basics_version}"
  jaxb "org.jvnet.jaxb2_commons:jaxb2-basics:${jaxb2_basics_version}"

  jaxb "javax.activation:activation:${activation_version}"
  jaxb "javax.xml.bind:jaxb-api:${jaxb_version}"
  // jaxb-core is slated to be removed in 2.4
  jaxb "org.glassfish.jaxb:jaxb-core:${jaxb_version}"
  jaxb "org.glassfish.jaxb:jaxb-runtime:${jaxb_version}"
  jaxb "org.glassfish.jaxb:jaxb-xjc:${jaxb_version}"

  // jaxb2-basics dependencies
  jaxb "commons-beanutils:commons-beanutils:1.9.3"
  jaxb "commons-collections:commons-collections:3.2.2"
  jaxb "commons-io:commons-io:2.4"
  jaxb "org.apache.commons:commons-lang3:3.2.1"
  jaxb "org.slf4j:slf4j-api:1.7.7"
  jaxb "org.slf4j:slf4j-simple:1.7.7"
  jaxb "org.slf4j:jcl-over-slf4j:1.7.7"
  jaxb "com.google.code.javaparser:javaparser:1.0.11"

  testCompile "junit:junit-dep:4.11"
}

sourceSets {
  main {
    java {
      srcDirs = [
        "src/main/java",
        gensrc
      ]
    }
    resources {
      srcDirs = ["etc"]
      includes = [
        "eqxml/*.xsd",
        "quakeml_1.2/*.xsd"
      ]
    }
  }
  test {
    java {
      srcDirs = ["src/test/java"]
    }
  }
}


clean.doFirst {
  delete("bin")
  delete(gensrc)
}

jacocoTestReport {
  reports {
    html.enabled true
    xml.enabled true
  }
}
check.dependsOn jacocoTestReport

jar {
  manifest {
    attributes "Git-Commit": getGitCommit('.')
  }
  baseName = "eqmessageutils"
  from {
      configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

javadoc {
  failOnError = false
}

test {
  filter {
    includeTestsMatching "*Test"
  }
}


task jaxb() {
  doLast() {
    mkdir(gensrc)

    ant.taskdef(
        name: "xjc",
        classname: "org.jvnet.jaxb2_commons.xjc.XJC2Task",
        classpath: configurations.jaxb.asPath)

    ant.xjc(
        destdir: gensrc,
        extension: true,
        fork: true,
        package: "gov.usgs.ansseqmsg") {
      arg(line: "-enableIntrospection")
      binding(dir: "etc/eqxml", includes: "*.bindings.xml")
      schema(dir: "etc/eqxml", includes: "*.xsd")
      produces(dir: "${gensrc}/gov/usgs/ansseqmsg")
    }

    ant.xjc(
        destdir: gensrc,
        extension: true,
        fork: true,
        package: "org.quakeml_1_1") {
      arg(line: "-enableIntrospection")
      binding(dir: "etc/quakeml_1.1", includes: "*.bindings.xml")
      schema(dir: "etc/quakeml_1.1", includes: "*_jaxb.xsd")
      produces(dir: "${gensrc}/org/quakeml_1_1")
    }

    ant.xjc(
        destdir: gensrc,
        extension: true,
        fork: true,
        package: "org.quakeml_1_2") {
      arg(line: "-enableIntrospection")
      arg(line: "-Xwildcard")
      binding(dir: "etc/quakeml_1.2", includes: "*.bindings.xml")
      schema(dir: "etc/quakeml_1.2", includes: "*_jaxb.xsd")
      produces(dir: "${gensrc}/org/quakeml_1_2")
    }

    ant.xjc(
        destdir: gensrc,
        extension: true,
        fork: true,
        package: "org.quakeml_rt_1_2") {
      arg(line: "-enableIntrospection")
      binding(dir: "etc/quakeml_rt_1.2", includes: "*.bindings.xml")
      schema(dir: "etc/quakeml_rt_1.2", includes: "*_jaxb.xsd")
      produces(dir: "${gensrc}/org/quakeml_rt_1_2")
    }

  }
}
compileJava.dependsOn jaxb

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
        "report",
        "-l",
        "Java",
        "-r",
        "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    ]
}
