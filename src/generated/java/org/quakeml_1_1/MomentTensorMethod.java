//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0.1 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.08.21 at 09:51:51 AM MDT 
//


package org.quakeml_1_1;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for MomentTensorMethod.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="MomentTensorMethod"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="CMT - general moment tensor"/&gt;
 *     &lt;enumeration value="CMT - moment tensor with zero trace"/&gt;
 *     &lt;enumeration value="CMT - double-couple source"/&gt;
 *     &lt;enumeration value="teleseismic"/&gt;
 *     &lt;enumeration value="regional"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "MomentTensorMethod")
@XmlEnum
public enum MomentTensorMethod {

    @XmlEnumValue("CMT - general moment tensor")
    CMT_GENERAL_MOMENT_TENSOR("CMT - general moment tensor"),
    @XmlEnumValue("CMT - moment tensor with zero trace")
    CMT_MOMENT_TENSOR_WITH_ZERO_TRACE("CMT - moment tensor with zero trace"),
    @XmlEnumValue("CMT - double-couple source")
    CMT_DOUBLE_COUPLE_SOURCE("CMT - double-couple source"),
    @XmlEnumValue("teleseismic")
    TELESEISMIC("teleseismic"),
    @XmlEnumValue("regional")
    REGIONAL("regional");
    private final String value;

    MomentTensorMethod(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static MomentTensorMethod fromValue(String v) {
        for (MomentTensorMethod c: MomentTensorMethod.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
