//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.2 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.02.05 at 11:56:10 AM MST 
//


package org.quakeml_1_1;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for EventType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="EventType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="earthquake"/&gt;
 *     &lt;enumeration value="induced earthquake"/&gt;
 *     &lt;enumeration value="quarry blast"/&gt;
 *     &lt;enumeration value="explosion"/&gt;
 *     &lt;enumeration value="chemical explosion"/&gt;
 *     &lt;enumeration value="nuclear explosion"/&gt;
 *     &lt;enumeration value="landslide"/&gt;
 *     &lt;enumeration value="rockslide"/&gt;
 *     &lt;enumeration value="snow avalanche"/&gt;
 *     &lt;enumeration value="debris avalanche"/&gt;
 *     &lt;enumeration value="mine collapse"/&gt;
 *     &lt;enumeration value="building collapse"/&gt;
 *     &lt;enumeration value="volcanic eruption"/&gt;
 *     &lt;enumeration value="meteor impact"/&gt;
 *     &lt;enumeration value="plane crash"/&gt;
 *     &lt;enumeration value="sonic boom"/&gt;
 *     &lt;enumeration value="not existing"/&gt;
 *     &lt;enumeration value="null"/&gt;
 *     &lt;enumeration value="other"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "EventType")
@XmlEnum
public enum EventType {

    @XmlEnumValue("earthquake")
    EARTHQUAKE("earthquake"),
    @XmlEnumValue("induced earthquake")
    INDUCED_EARTHQUAKE("induced earthquake"),
    @XmlEnumValue("quarry blast")
    QUARRY_BLAST("quarry blast"),
    @XmlEnumValue("explosion")
    EXPLOSION("explosion"),
    @XmlEnumValue("chemical explosion")
    CHEMICAL_EXPLOSION("chemical explosion"),
    @XmlEnumValue("nuclear explosion")
    NUCLEAR_EXPLOSION("nuclear explosion"),
    @XmlEnumValue("landslide")
    LANDSLIDE("landslide"),
    @XmlEnumValue("rockslide")
    ROCKSLIDE("rockslide"),
    @XmlEnumValue("snow avalanche")
    SNOW_AVALANCHE("snow avalanche"),
    @XmlEnumValue("debris avalanche")
    DEBRIS_AVALANCHE("debris avalanche"),
    @XmlEnumValue("mine collapse")
    MINE_COLLAPSE("mine collapse"),
    @XmlEnumValue("building collapse")
    BUILDING_COLLAPSE("building collapse"),
    @XmlEnumValue("volcanic eruption")
    VOLCANIC_ERUPTION("volcanic eruption"),
    @XmlEnumValue("meteor impact")
    METEOR_IMPACT("meteor impact"),
    @XmlEnumValue("plane crash")
    PLANE_CRASH("plane crash"),
    @XmlEnumValue("sonic boom")
    SONIC_BOOM("sonic boom"),
    @XmlEnumValue("not existing")
    NOT_EXISTING("not existing"),
    @XmlEnumValue("null")
    NULL("null"),
    @XmlEnumValue("other")
    OTHER("other");
    private final String value;

    EventType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static EventType fromValue(String v) {
        for (EventType c: EventType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
