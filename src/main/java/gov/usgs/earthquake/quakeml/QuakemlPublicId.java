package gov.usgs.earthquake.quakeml;

/**
 * Utility for generating Quakeml Public Ids.
 * 
 * This mapping is used when converting EQXML or CUBE into Quakeml, and can
 * parse IDs generated by this class. However, ANSS networks do not necesarily
 * follow this convention when natively producing quakeml and so it should be
 * used cautiously.
 * 
 * @author jmfee
 */
public class QuakemlPublicId {

	public static final String ANSS_AUTHORITY_PREFIX = "quakeml:";
	public static final String ANSS_AUTHORITY_SUFFIX = ".anss.org";

	/** quakeml components. */
	private String authority;
	private String resourceId;

	/** anss components. */
	private String anssDataSource;
	private String anssEventId;
	private String anssResourceType;
	private String anssExtension;

	/**
	 * Construct a quakeml public id using authority and resource id.
	 * 
	 * @param authority
	 *            the quakeml authority.
	 * @param resourceId
	 *            the quakeml resource id.
	 */
	public QuakemlPublicId(final String authority, final String resourceId) {
		this.authority = authority;
		this.resourceId = resourceId;

		if (this.authority.endsWith(ANSS_AUTHORITY_SUFFIX)) {
			// parse the anss data source
			anssDataSource = this.authority;
			anssDataSource = anssDataSource.replace(ANSS_AUTHORITY_PREFIX, "");
			anssDataSource = anssDataSource.replace(ANSS_AUTHORITY_SUFFIX, "");
			// parse the resource id
			String[] parts = this.resourceId.split("/", 3);
			anssResourceType = parts[0];
			anssEventId = parts[1];
			if (parts.length > 2) {
				anssExtension = parts[2];
			} else {
				anssExtension = null;
			}
		}
	}

	/**
	 * Construct a quakeml public id using anss attributes.
	 * 
	 * @param anssDataSource
	 *            the anss data source.
	 * @param anssEventId
	 *            the anss event id.
	 * @param anssResourceType
	 *            the anss resource type.
	 * @param anssExtension
	 *            any anss extended id for this resource.
	 */
	public QuakemlPublicId(final String anssDataSource,
			final String anssResourceType, final String anssEventId,
			final String anssExtension) {
		this.anssDataSource = anssDataSource;
		this.anssResourceType = anssResourceType;
		this.anssEventId = anssEventId;
		this.anssExtension = anssExtension;

		this.authority = ANSS_AUTHORITY_PREFIX + anssDataSource
				+ ANSS_AUTHORITY_SUFFIX;
		this.resourceId = this.anssResourceType + "/" + this.anssEventId;
		if (this.anssExtension != null) {
			this.resourceId = this.resourceId + "/" + this.anssExtension;
		}
	}

	/**
	 * Whether the quakeml authority for this object matches the ANSS
	 * convention.
	 * 
	 * @return true if this authority appears to be from an ANSS source, false
	 *         otherwise.
	 */
	public boolean isAnss() {
		return this.anssDataSource != null;
	}

	/**
	 * Quakeml public id always has an authority.
	 * 
	 * @return the quakeml authority.
	 */
	public String getAuthority() {
		return this.authority;
	}

	/**
	 * Quakeml public id always has a resource id.
	 * 
	 * @return the quakeml resource id.
	 */
	public String getResourceId() {
		return this.resourceId;
	}

	/**
	 * Only ANSS public ids have an ANSS data source.
	 * 
	 * @return the ANSS data source, or null.
	 */
	public String getAnssDataSource() {
		return this.anssDataSource;
	}

	/**
	 * Only ANSS public ids have an ANSS resource type.
	 * 
	 * @return the ANSS resource type, or null.
	 */
	public String getAnssResourceType() {
		return this.anssResourceType;
	}

	/**
	 * Only ANSS public ids have an ANSS event id.
	 * 
	 * @return the ANSS event id, or null.
	 */
	public String getAnssEventId() {
		return this.anssEventId;
	}

	/**
	 * Only ANSS public ids have an ANSS extension, although it is optional and
	 * may be null.
	 * 
	 * @return the ANSS extension, or null.
	 */
	public String getAnssExtension() {
		return this.anssExtension;
	}

	/**
	 * @return quakeml public id URI.
	 */
	public String getPublicId() {
		return this.authority + "/" + this.resourceId;
	}

	@Override
	public String toString() {
		return this.getPublicId();
	}

	/**
	 * Factory method for public id URI.
	 * 
	 * @param publicId
	 *            the URI to parse.
	 * @return QuakemlPublicId object for URI.
	 */
	public static QuakemlPublicId parse(final String publicId) {
		String[] parts = publicId.split("/", 2);
		return new QuakemlPublicId(parts[0], parts[1]);
	}

}
